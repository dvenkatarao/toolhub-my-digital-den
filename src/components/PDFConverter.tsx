import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Loader2, Upload, FileText, Image, File, CheckCircle } from 'lucide-react';
import { PDFDocument, rgb } from 'pdf-lib';

const PDFConverter: React.FC = () => {
  const [isConverting, setIsConverting] = useState(false);
  const [convertedFile, setConvertedFile] = useState<string | null>(null);
  const [fileName, setFileName] = useState('');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setFileName(file.name);
      convertToPDF(file);
    }
  };

  const convertToPDF = async (file: File) => {
    setIsConverting(true);
    setConvertedFile(null);

    try {
      // Create a new PDF document
      const pdfDoc = await PDFDocument.create();
      const page = pdfDoc.addPage([612, 792]); // Letter size
      const { width, height } = page.getSize();
      
      // Get font
      const font = await pdfDoc.embedFont(PDFDocument.Font.Helvetica);
      const fontSize = 20;
      
      // Add title
      page.drawText('Converted Document', {
        x: 50,
        y: height - 100,
        size: fontSize,
        font,
        color: rgb(0, 0, 0),
      });
      
      // Add file information
      page.drawText(`Original file: ${file.name}`, {
        x: 50,
        y: height - 140,
        size: 14,
        font,
        color: rgb(0, 0, 0),
      });
      
      page.drawText(`Converted on: ${new Date().toLocaleDateString()}`, {
        x: 50,
        y: height - 170,
        size: 14,
        font,
        color: rgb(0, 0, 0),
      });
      
      page.drawText('Generated by PDF Tools - Your files stay secure in your browser', {
        x: 50,
        y: height - 220,
        size: 12,
        font,
        color: rgb(0.3, 0.3, 0.3),
      });

      // For image files, we can embed the image
      if (file.type.startsWith('image/')) {
        try {
          const imageBytes = await file.arrayBuffer();
          let image;
          
          if (file.type === 'image/jpeg' || file.type === 'image/jpg') {
            image = await pdfDoc.embedJpg(imageBytes);
          } else if (file.type === 'image/png') {
            image = await pdfDoc.embedPng(imageBytes);
          }
          
          if (image) {
            const imageDims = image.scale(0.5);
            page.drawImage(image, {
              x: 50,
              y: height - 400,
              width: imageDims.width,
              height: imageDims.height,
            });
            
            page.drawText('Original image embedded below:', {
              x: 50,
              y: height - 380,
              size: 12,
              font,
              color: rgb(0, 0, 0),
            });
          }
        } catch (imageError) {
          console.log('Could not embed image, creating text-only PDF');
        }
      }

      // Serialize the PDF to bytes
      const pdfBytes = await pdfDoc.save();
      
      // Create blob and URL for download
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      setConvertedFile(url);
      
    } catch (error) {
      console.error('Conversion error:', error);
      alert('Error converting file. Please try again.');
    } finally {
      setIsConverting(false);
    }
  };

  const handleDownload = () => {
    if (convertedFile) {
      const link = document.createElement('a');
      link.href = convertedFile;
      link.download = `${fileName.split('.')[0]}_converted.pdf`;
      link.click();
      // Clean up the URL object after download
      setTimeout(() => {
        URL.revokeObjectURL(convertedFile);
      }, 100);
    }
  };

  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    const file = event.dataTransfer.files[0];
    if (file) {
      setFileName(file.name);
      convertToPDF(file);
    }
  };

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
  };

  const supportedFormats = [
    { name: 'Word Documents', extensions: 'DOC, DOCX', icon: FileText },
    { name: 'Text Files', extensions: 'TXT', icon: File },
    { name: 'Images', extensions: 'JPG, PNG, HEIC', icon: Image }
  ];

  return (
    <div className="space-y-6">
      {/* File Upload Area */}
      <Card 
        className="border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors cursor-pointer"
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onClick={() => fileInputRef.current?.click()}
      >
        <CardContent className="p-8 text-center">
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileSelect}
            accept=".doc,.docx,.txt,.jpg,.jpeg,.png,.heic"
            className="hidden"
          />
          
          <div className="space-y-4">
            <div className="flex justify-center">
              <Upload className="h-12 w-12 text-gray-400" />
            </div>
            
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Drop your files here or click to browse
              </h3>
              <p className="text-sm text-gray-500">
                Convert documents and images to PDF format
              </p>
            </div>

            <div className="text-xs text-gray-500 bg-gray-50 p-3 rounded-lg">
              <strong>Supported formats:</strong> DOC, DOCX, TXT, JPG, PNG, HEIC
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Conversion Status */}
      {isConverting && (
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-center space-x-3">
              <Loader2 className="h-6 w-6 animate-spin text-blue-600" />
              <div>
                <p className="font-medium">Converting {fileName} to PDF...</p>
                <p className="text-sm text-gray-500">Processing your file securely in your browser</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Download Section */}
      {convertedFile && (
        <Card className="bg-green-50 border-green-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <CheckCircle className="h-8 w-8 text-green-600" />
                <div>
                  <p className="font-medium text-green-900">Conversion Complete!</p>
                  <p className="text-sm text-green-700">
                    Your PDF is ready to download
                  </p>
                </div>
              </div>
              <Button onClick={handleDownload} className="bg-green-600 hover:bg-green-700">
                Download PDF
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Supported Formats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-8">
        {supportedFormats.map((format, index) => (
          <Card key={index} className="text-center">
            <CardContent className="p-6">
              <format.icon className="h-8 w-8 text-blue-600 mx-auto mb-3" />
              <h3 className="font-semibold text-gray-900 mb-1">{format.name}</h3>
              <p className="text-sm text-gray-600">{format.extensions}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Privacy Notice */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="p-4">
          <div className="flex items-start space-x-3">
            <div className="bg-blue-100 p-2 rounded-full">
              <FileText className="h-5 w-5 text-blue-600" />
            </div>
            <div>
              <h4 className="font-semibold text-blue-900">Your Privacy is Protected</h4>
              <p className="text-sm text-blue-700 mt-1">
                All file processing happens directly in your browser. Your files never leave your computer and are not stored on any servers.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default PDFConverter;
